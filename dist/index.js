parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"rP21":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.bumpVersion=void 0;const e=require("json-bumper"),o=async(o,s)=>{if(await e(o,s),"package.json"===o)try{await e("package-lock.json",s)}catch(r){console.log(r)}};exports.bumpVersion=o;
},{}],"QCba":[function(require,module,exports) {
"use strict";var e=require("./helpers/bumper"),o=require("actions-toolkit");o.Toolkit.run(async o=>{const s=process.env.TAG_PREFIX||"v",n=process.env.VERSION_FILE_NAME||"package.json",i=process.env.VERSION_ENTRY||"version",r=process.env.GITHUB_USER||"Inkblot Version Bumper",t=process.env.GITHUB_EMAIL||"dev@inkblottherapy.com";try{var a;await o.runInWorkspace("git",["config","user.name",`"${r}"`]),await o.runInWorkspace("git",["config","user.email",`"${t}"`]);const p=null===(a=/refs\/[a-zA-Z]+\/(.*)/.exec(process.env.GITHUB_REF))||void 0===a?void 0:a[1];await o.runInWorkspace("git",["checkout",p]);const l=JSON.stringify(await o.runInWorkspace("git",["log","-1"]))||"";if(console.log("lastcommitmessage",l),l.includes("[ci-bump version=")){const o=l.split('[version=\\"')[1].split('\\"')[0];console.log("replace:",o),await(0,e.bumpVersion)(n,{replace:o,entry:i})}else if(l.includes("[pre=")){console.log("pre");const o=l.split('[ci-bump pre=\\"')[1].split('\\"')[0];console.log("pre:",o),await(0,e.bumpVersion)(n,{pre:o,entry:i})}else l.includes("[major]")||l.includes("[release]")?(console.log("major"),await(0,e.bumpVersion)(n,{major:!0,entry:i})):l.includes("[minor]")||l.includes("[feature]")?(console.log("minor"),await(0,e.bumpVersion)(n,{minor:!0,entry:i})):(console.log("patch"),await(0,e.bumpVersion)(n));const u=JSON.parse(o.getFile(n)).version;await o.runInWorkspace("git",["commit","-a","-m",`[github-action]: version bumped to v${u}`]);const g=`https://${process.env.GITHUB_ACTOR}:${process.env.GITHUB_TOKEN}@github.com/${process.env.GITHUB_REPOSITORY}.git`;await o.runInWorkspace("git",["tag",`${s}${u}`]),await o.runInWorkspace("git",["push",g,"--follow-tags"]),await o.runInWorkspace("git",["push",g,"--tags"])}catch(c){o.log.fatal(c),o.exit.failure("Failed to bump version")}o.exit.success("Version bumped!")});
},{"./helpers/bumper":"rP21"}]},{},["QCba"], null)